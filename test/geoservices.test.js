// Generated by CoffeeScript 1.4.0
var assert, expectGetRequest, geoservices, getUrlTest, nock;

geoservices = require("../");

assert = require("assert");

nock = require("nock");

expectGetRequest = function(requestedPath, expectedPath, response, filter) {
  var req;
  if (filter == null) {
    filter = true;
  }
  req = nock("http://example.com");
  if (filter) {
    req = req.filteringPath(/\?.+$/, "");
  }
  req.get(expectedPath || "").reply(200, response);
  return req;
};

getUrlTest = function(requestedPath, expectedPath, filter) {
  return function(done) {
    expectGetRequest(requestedPath, expectedPath, "{}", filter);
    return geoservices.get({
      host: "example.com",
      path: requestedPath
    }, function() {
      nock.cleanAll();
      return done();
    });
  };
};

describe("geoservices", function() {
  return describe("get", function() {
    it("should request the specified URL", getUrlTest("/ArcGIS/rest/services", "/ArcGIS/rest/services"));
    it("should use method GET", function() {
      return getUrlTest("", "");
    });
    it("should throw an error if no host", function() {
      return assert.throws(function() {
        return geoservices.get();
      });
    });
    it("should allow null path", getUrlTest(null, ""));
    it("should allow undefined path", getUrlTest(void 0, ""));
    it("should add json format parameter", getUrlTest("", "?f=json", false));
    it("should leave format parameter if present", getUrlTest("?f=pjson", "?f=pjson", false));
    it("should add params to querystring", function(done) {
      expectGetRequest("", "?param1=value1&f=json", "{}", false);
      return geoservices.get({
        host: "example.com",
        params: {
          param1: "value1"
        }
      }, function() {
        nock.cleanAll();
        return done();
      });
    });
    it("should parse and return response", function(done) {
      expectGetRequest("", "", '{ "success": true }');
      return geoservices.get({
        host: "example.com"
      }, function(result) {
        assert.deepEqual(result, {
          success: true
        });
        nock.cleanAll();
        return done();
      });
    });
    return it("should return an error object when response cannot be parsed", function(done) {
      expectGetRequest("", "", "<xml>this is not json</xml>");
      return geoservices.get({
        host: "example.com"
      }, function(result) {
        assert.deepEqual("Response body is not valid JSON", result.error);
        assert.deepEqual("<xml>this is not json</xml>", result.responseBody);
        nock.cleanAll();
        return done();
      });
    });
  });
});
